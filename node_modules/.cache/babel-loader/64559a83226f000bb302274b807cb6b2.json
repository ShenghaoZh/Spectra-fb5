{"ast":null,"code":"var _jsxFileName = \"/Users/shenghaozhang/Documents/Programs/0-Spectra/HW5-React/react-ui/src/components/Charts/lineSeries.js\";\nimport React, { Component } from 'react';\nimport MyTemplete from '../Template';\nimport { XYPlot, XAxis, YAxis, HorizontalGridLines, VerticalGridLines, LineSeries } from 'react-vis';\nimport CodeBlock from '../';\nimport ReactMarkdown from 'react-markdown';\n\nclass MyLineSeries extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: false\n    };\n  }\n\n  renderHeat() {\n    const data = [];\n\n    for (let i = 0; i < 20; i++) {\n      const series = [];\n\n      for (let j = 0; j < 100; j++) {\n        series.push({\n          x: j,\n          y: (i / 10 + 1) * Math.sin(Math.PI * (i + j) / 50)\n        });\n      }\n\n      data.push({\n        color: i,\n        key: i,\n        data: series,\n        opacity: 0.8\n      });\n    }\n\n    return React.createElement(\"div\", {\n      style: {\n        justifyContent: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(XYPlot, {\n      width: 500,\n      height: 500,\n      margin: {\n        left: 70,\n        top: 20\n      },\n      colorType: \"linear\",\n      colorDomain: [0, 9],\n      colorRange: ['white', 'black'],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(HorizontalGridLines, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), React.createElement(VerticalGridLines, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), React.createElement(XAxis, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }), React.createElement(YAxis, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), data.map(props => React.createElement(LineSeries, Object.assign({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    })))));\n  }\n\n  render() {\n    let output = this.renderHeat();\n    let myName = \"Line Series\";\n    let string = \"\\n      import React from 'react';\\n\\n      import {\\n        XYPlot,\\n        XAxis,\\n        YAxis,\\n        HorizontalGridLines,\\n        VerticalGridLines,\\n        LineSeries\\n      } from 'index';\\n\\n      const data = [];\\n\\n      for (let i = 0; i < 20; i++) {\\n        const series = [];\\n        for (let j = 0; j < 100; j++) {\\n          series.push({x: j, y: (i / 10 + 1) * Math.sin((Math.PI * (i + j)) / 50)});\\n        }\\n        data.push({color: i, key: i, data: series, opacity: 0.8});\\n      }\\n\\n      export default function Example() {\\n        return (\\n          <XYPlot\\n            width={300}\\n            height={300}\\n            colorType=\\\"linear\\\"\\n            colorDomain={[0, 9]}\\n            colorRange={['yellow', 'orange']}\\n          >\\n            <HorizontalGridLines />\\n            <VerticalGridLines />\\n            <XAxis />\\n            <YAxis />\\n            {data.map(props => (\\n              <LineSeries {...props} />\\n            ))}\\n          </XYPlot>\\n        );\\n      }\\n    \";\n    let code = React.createElement(ReactMarkdown, {\n      source: string,\n      renderers: {\n        code: CodeBlock\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(MyTemplete, {\n      content: output,\n      name: myName,\n      sampleUsage: code,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MyLineSeries;","map":{"version":3,"sources":["/Users/shenghaozhang/Documents/Programs/0-Spectra/HW5-React/react-ui/src/components/Charts/lineSeries.js"],"names":["React","Component","MyTemplete","XYPlot","XAxis","YAxis","HorizontalGridLines","VerticalGridLines","LineSeries","CodeBlock","ReactMarkdown","MyLineSeries","state","value","renderHeat","data","i","series","j","push","x","y","Math","sin","PI","color","key","opacity","justifyContent","left","top","map","props","render","output","myName","string","code"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport MyTemplete  from '../Template';\nimport {\n  XYPlot,\n  XAxis,\n  YAxis,\n  HorizontalGridLines,\n  VerticalGridLines,\n  LineSeries\n} from 'react-vis';\nimport CodeBlock from '../';\nimport ReactMarkdown from 'react-markdown';\n\nclass MyLineSeries extends Component\n{\n  state = {\n    value: false\n  };\n  renderHeat()\n  {\n    \n    const data=[];\n    for (let i = 0; i < 20; i++) {\n      const series = [];\n      for (let j = 0; j < 100; j++) {\n        series.push({x: j, y: (i / 10 + 1) * Math.sin((Math.PI * (i + j)) / 50)});\n      }\n      data.push({color: i, key: i, data: series, opacity: 0.8});\n    }\n\n    return (\n      <div style={{justifyContent: \"center\"}}>\n        <XYPlot\n          width={500}\n          height={500}\n          margin={{left: 70, top: 20}}\n          colorType=\"linear\"\n          colorDomain={[0, 9]}\n          colorRange={['white', 'black']}\n        >\n          <HorizontalGridLines />\n          <VerticalGridLines />\n          <XAxis />\n          <YAxis />\n          {data.map(props => (\n            <LineSeries {...props} />\n          ))}\n        </XYPlot>\n      </div>\n    );\n  }\n  render()\n  {\n    let output = this.renderHeat();\n    let myName = \"Line Series\";\n    let string = `\n      import React from 'react';\n\n      import {\n        XYPlot,\n        XAxis,\n        YAxis,\n        HorizontalGridLines,\n        VerticalGridLines,\n        LineSeries\n      } from 'index';\n\n      const data = [];\n\n      for (let i = 0; i < 20; i++) {\n        const series = [];\n        for (let j = 0; j < 100; j++) {\n          series.push({x: j, y: (i / 10 + 1) * Math.sin((Math.PI * (i + j)) / 50)});\n        }\n        data.push({color: i, key: i, data: series, opacity: 0.8});\n      }\n\n      export default function Example() {\n        return (\n          <XYPlot\n            width={300}\n            height={300}\n            colorType=\"linear\"\n            colorDomain={[0, 9]}\n            colorRange={['yellow', 'orange']}\n          >\n            <HorizontalGridLines />\n            <VerticalGridLines />\n            <XAxis />\n            <YAxis />\n            {data.map(props => (\n              <LineSeries {...props} />\n            ))}\n          </XYPlot>\n        );\n      }\n    `;\n    let code = (<ReactMarkdown source={string} renderers={{ code: CodeBlock }}/>);\n    return(\n      <div>\n      <MyTemplete content = {output} name = {myName} sampleUsage = {code}/>\n      </div>\n    );\n  }\n}\n\nexport default MyLineSeries;\n"]},"metadata":{},"sourceType":"module"}