{"ast":null,"code":"var _jsxFileName = \"/Users/shenghaozhang/Documents/Programs/0-Spectra/HW5-React/react-ui/src/components/Charts/area.js\";\nimport React, { Component } from 'react';\nimport MyTemplete from '../Template';\nimport { XYPlot, XAxis, YAxis, HorizontalGridLines, VerticalGridLines, AreaSeries } from 'react-vis';\nimport CodeBlock from '../';\nimport ReactMarkdown from 'react-markdown';\n\nclass MyArea extends Component {\n  renderArea() {\n    const data = [{\n      x: 0,\n      y: 15\n    }, {\n      x: 1,\n      y: 10\n    }, {\n      x: 2,\n      y: 9\n    }, {\n      x: 3,\n      y: 12\n    }, {\n      x: 4,\n      y: 10\n    }, {\n      x: 5,\n      y: 4\n    }, {\n      x: 6,\n      y: 8\n    }, {\n      x: 7,\n      y: 13\n    }, {\n      x: 8,\n      y: 10\n    }, {\n      x: 9,\n      y: 9\n    }, {\n      x: 10,\n      y: 14\n    }, {\n      x: 11,\n      y: 14\n    }, {\n      x: 12,\n      y: 11\n    }, {\n      x: 13,\n      y: 8\n    }, {\n      x: 14,\n      y: 15\n    }, {\n      x: 15,\n      y: 10\n    }];\n    return React.createElement(\"div\", {\n      className: \"area-display\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(XYPlot, {\n      margin: {\n        Bottom: 20,\n        top: 30\n      },\n      height: 700,\n      width: 700,\n      yDomain: [0, 18],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(VerticalGridLines, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), React.createElement(HorizontalGridLines, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }), React.createElement(XAxis, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }), React.createElement(YAxis, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }), React.createElement(AreaSeries, {\n      curve: \"curveMonotoneX\",\n      data: data,\n      color: \"#414141\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    })));\n  }\n\n  render() {\n    let output = this.renderArea();\n    let myName = \"Area\";\n    let string = \"\\n    import {XYPlot, XAxis, YAxis, HorizontalGridLines, VerticalGridLines,AreaSeries} from 'react-vis';\\n\\n    const data = [\\n      {x: 0, y: 8},\\n      {x: 1, y: 5},\\n      {x: 2, y: 4},\\n      {x: 3, y: 9},\\n      {x: 4, y: 1},\\n      {x: 5, y: 7},\\n      {x: 6, y: 6},\\n      {x: 7, y: 3},\\n      {x: 8, y: 2},\\n      {x: 9, y: 0}\\n    ];\\n    return (\\n      <div>\\n        <XYPlot height={500} width= {500}>\\n          <VerticalGridLines />\\n          <HorizontalGridLines />\\n          <XAxis />\\n          <YAxis />\\n          <AreaSeries data={data} color=\\\"#cd3b54\\\"/>\\n        </XYPlot>\\n      </div>\\n    );\\n\\n    \";\n    let code = React.createElement(ReactMarkdown, {\n      source: string,\n      renderers: {\n        code: CodeBlock\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(MyTemplete, {\n      content: output,\n      name: myName,\n      sampleUsage: code,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default MyArea;","map":{"version":3,"sources":["/Users/shenghaozhang/Documents/Programs/0-Spectra/HW5-React/react-ui/src/components/Charts/area.js"],"names":["React","Component","MyTemplete","XYPlot","XAxis","YAxis","HorizontalGridLines","VerticalGridLines","AreaSeries","CodeBlock","ReactMarkdown","MyArea","renderArea","data","x","y","Bottom","top","render","output","myName","string","code"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport MyTemplete  from '../Template';\nimport {XYPlot, XAxis, YAxis, HorizontalGridLines, VerticalGridLines, AreaSeries} from 'react-vis';\nimport CodeBlock from '../';\nimport ReactMarkdown from 'react-markdown';\n\nclass MyArea extends Component\n{\n\n  renderArea()\n  {\n    const data = [\n      {x: 0, y: 15},\n      {x: 1, y: 10},\n      {x: 2, y: 9},\n      {x: 3, y: 12},\n      {x: 4, y: 10},\n      {x: 5, y: 4},\n      {x: 6, y: 8},\n      {x: 7, y: 13},\n      {x: 8, y: 10},\n      {x: 9, y: 9},\n      {x: 10, y: 14},\n      {x: 11, y: 14},\n      {x: 12, y: 11},\n      {x: 13, y: 8},\n      {x: 14, y: 15},\n      {x: 15, y: 10}\n    ];\n    return (\n      <div className = \"area-display\">\n        <XYPlot margin={{Bottom: 20, top: 30}} height={700} width= {700} yDomain={[0, 18]}>\n          <VerticalGridLines />\n          <HorizontalGridLines />\n          <XAxis />\n          <YAxis />\n          <AreaSeries curve=\"curveMonotoneX\" data={data} color=\"#414141\"/>\n        </XYPlot>\n      </div>\n    );\n  }\n  render()\n  {\n    let output = this.renderArea();\n    let myName = \"Area\";\n    let string = `\n    import {XYPlot, XAxis, YAxis, HorizontalGridLines, VerticalGridLines,AreaSeries} from 'react-vis';\n\n    const data = [\n      {x: 0, y: 8},\n      {x: 1, y: 5},\n      {x: 2, y: 4},\n      {x: 3, y: 9},\n      {x: 4, y: 1},\n      {x: 5, y: 7},\n      {x: 6, y: 6},\n      {x: 7, y: 3},\n      {x: 8, y: 2},\n      {x: 9, y: 0}\n    ];\n    return (\n      <div>\n        <XYPlot height={500} width= {500}>\n          <VerticalGridLines />\n          <HorizontalGridLines />\n          <XAxis />\n          <YAxis />\n          <AreaSeries data={data} color=\"#cd3b54\"/>\n        </XYPlot>\n      </div>\n    );\n\n    `;\n    let code = (<ReactMarkdown source={string} renderers={{ code: CodeBlock }}/>);\n    return(\n      <div>\n      <MyTemplete content = {output} name = {myName} sampleUsage = {code}/>\n      </div>\n    );\n  }\n}\n\nexport default MyArea;\n"]},"metadata":{},"sourceType":"module"}